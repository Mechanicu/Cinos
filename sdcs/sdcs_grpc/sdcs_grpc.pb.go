// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: sdcs_grpc/sdcs.proto

package sdcs_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SdcsSyncClient is the client API for SdcsSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SdcsSyncClient interface {
	SetIndex(ctx context.Context, in *SetIndexReq, opts ...grpc.CallOption) (*SetIndexRep, error)
	SetData(ctx context.Context, in *SetDataReq, opts ...grpc.CallOption) (*SetDataRep, error)
	GetData(ctx context.Context, in *GetDataReq, opts ...grpc.CallOption) (*GetDataRep, error)
	DeleteIndex(ctx context.Context, in *DeleteIndexReq, opts ...grpc.CallOption) (*DeleteIndexRep, error)
}

type sdcsSyncClient struct {
	cc grpc.ClientConnInterface
}

func NewSdcsSyncClient(cc grpc.ClientConnInterface) SdcsSyncClient {
	return &sdcsSyncClient{cc}
}

func (c *sdcsSyncClient) SetIndex(ctx context.Context, in *SetIndexReq, opts ...grpc.CallOption) (*SetIndexRep, error) {
	out := new(SetIndexRep)
	err := c.cc.Invoke(ctx, "/sdcs_grpc.sdcs_sync/SetIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdcsSyncClient) SetData(ctx context.Context, in *SetDataReq, opts ...grpc.CallOption) (*SetDataRep, error) {
	out := new(SetDataRep)
	err := c.cc.Invoke(ctx, "/sdcs_grpc.sdcs_sync/SetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdcsSyncClient) GetData(ctx context.Context, in *GetDataReq, opts ...grpc.CallOption) (*GetDataRep, error) {
	out := new(GetDataRep)
	err := c.cc.Invoke(ctx, "/sdcs_grpc.sdcs_sync/GetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdcsSyncClient) DeleteIndex(ctx context.Context, in *DeleteIndexReq, opts ...grpc.CallOption) (*DeleteIndexRep, error) {
	out := new(DeleteIndexRep)
	err := c.cc.Invoke(ctx, "/sdcs_grpc.sdcs_sync/DeleteIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SdcsSyncServer is the server API for SdcsSync service.
// All implementations must embed UnimplementedSdcsSyncServer
// for forward compatibility
type SdcsSyncServer interface {
	SetIndex(context.Context, *SetIndexReq) (*SetIndexRep, error)
	SetData(context.Context, *SetDataReq) (*SetDataRep, error)
	GetData(context.Context, *GetDataReq) (*GetDataRep, error)
	DeleteIndex(context.Context, *DeleteIndexReq) (*DeleteIndexRep, error)
	mustEmbedUnimplementedSdcsSyncServer()
}

// UnimplementedSdcsSyncServer must be embedded to have forward compatible implementations.
type UnimplementedSdcsSyncServer struct {
}

func (UnimplementedSdcsSyncServer) SetIndex(context.Context, *SetIndexReq) (*SetIndexRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIndex not implemented")
}
func (UnimplementedSdcsSyncServer) SetData(context.Context, *SetDataReq) (*SetDataRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetData not implemented")
}
func (UnimplementedSdcsSyncServer) GetData(context.Context, *GetDataReq) (*GetDataRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedSdcsSyncServer) DeleteIndex(context.Context, *DeleteIndexReq) (*DeleteIndexRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIndex not implemented")
}
func (UnimplementedSdcsSyncServer) mustEmbedUnimplementedSdcsSyncServer() {}

// UnsafeSdcsSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SdcsSyncServer will
// result in compilation errors.
type UnsafeSdcsSyncServer interface {
	mustEmbedUnimplementedSdcsSyncServer()
}

func RegisterSdcsSyncServer(s grpc.ServiceRegistrar, srv SdcsSyncServer) {
	s.RegisterService(&SdcsSync_ServiceDesc, srv)
}

func _SdcsSync_SetIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdcsSyncServer).SetIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdcs_grpc.sdcs_sync/SetIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdcsSyncServer).SetIndex(ctx, req.(*SetIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdcsSync_SetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdcsSyncServer).SetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdcs_grpc.sdcs_sync/SetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdcsSyncServer).SetData(ctx, req.(*SetDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdcsSync_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdcsSyncServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdcs_grpc.sdcs_sync/GetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdcsSyncServer).GetData(ctx, req.(*GetDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdcsSync_DeleteIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdcsSyncServer).DeleteIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdcs_grpc.sdcs_sync/DeleteIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdcsSyncServer).DeleteIndex(ctx, req.(*DeleteIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SdcsSync_ServiceDesc is the grpc.ServiceDesc for SdcsSync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SdcsSync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sdcs_grpc.sdcs_sync",
	HandlerType: (*SdcsSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetIndex",
			Handler:    _SdcsSync_SetIndex_Handler,
		},
		{
			MethodName: "SetData",
			Handler:    _SdcsSync_SetData_Handler,
		},
		{
			MethodName: "GetData",
			Handler:    _SdcsSync_GetData_Handler,
		},
		{
			MethodName: "DeleteIndex",
			Handler:    _SdcsSync_DeleteIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sdcs_grpc/sdcs.proto",
}
